import java.util.*;

class Edge implements Comparable<Edge>{
    int v1;
    int v2;
    int weight;
    
   public  Edge(int v1, int v2, int weight){
       this.v1=v1;
       this.v2=v2;
       this.weight=weight;
   }
   
   @Override
   public int compareTo(Edge o){
       return this.weight - o.weight;
   }
}

public class Solution {
    
    public static int findParent(int v, int [] parent){
    
    if(v == parent[v])
    return v;
    
    return findParent(parent[v], parent);
}


public static void kruskalAlgorithm(Edge [] edges, int n){
    Arrays.sort(edges);
    int count=0, i=0;
    int parent[]=new int[n];
    
    for(int j=0;j<n;j++)
    {
        parent[j]=j;
    }
    while(count != n-1){
        Edge current=edges[i++];
        int v1Parent=findParent(current.v1, parent);
        int v2Parent=findParent(current.v2, parent);
        if(v1Parent != v2Parent)
        {
            if(current.v1 < current.v2 )
                 System.out.println(current.v1+" "+current.v2+" "+current.weight);
            else
                 System.out.println(current.v2+" "+current.v1+" "+current.weight);
            count++;
            parent[v1Parent]=v2Parent;
        }
    }
    
}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();
        
        Edge edges[]=new Edge[E];
for(int i=0;i<E;i++)
{
    int v1=s.nextInt();
    int v2=s.nextInt();
    int weight=s.nextInt();
    Edge edge=new Edge(v1, v2, weight);
    edges[i]=edge;
}

kruskalAlgorithm(edges, V);

		
	}
}